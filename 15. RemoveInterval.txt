Leetcode 1272
Ques: A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form [a, b). A real number x is in the set if one of its intervals [a, b) contains x (i.e. a <= x < b).

You are given a sorted list of disjoint intervals intervals representing a set of real numbers as described above, where intervals[i] = [ai, bi] represents the interval [ai, bi). You are also given another interval toBeRemoved.

Return the set of real numbers with the interval toBeRemoved removed from intervals. In other words, return the set of real numbers such that every x in the set is in intervals but not in toBeRemoved. Your answer should be a sorted list of disjoint intervals as described above.

Example 1:
Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
Output: [[0,1],[6,7]]

Example 2:
Input: intervals = [[0,5]], toBeRemoved = [2,3]
Output: [[0,2],[3,5]]

Example 3:
Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
Output: [[-5,-4],[-3,-2],[4,5],[8,9]]

Soln:

Will understand later

public class Solution {

  public List<List<Integer>> removeInterval(int[][] intervals, int[] toBeRemoved) {
    Map<Integer, Integer> line = new HashMap<>();

    // Count occurrences of each point (start +1, end -1)
    for (int[] interval : intervals) {
      line.put(interval[0], line.getOrDefault(interval[0], 0) + 1);
      line.put(interval[1], line.getOrDefault(interval[1], 0) - 1);
    }

    // Adjust counts for the interval to be removed
    line.put(toBeRemoved[0], line.getOrDefault(toBeRemoved[0], 0) - 1);
    line.put(toBeRemoved[1], line.getOrDefault(toBeRemoved[1], 0) + 1);

    List<List<Integer>> ans = new ArrayList<>();
    int count = 0;
    boolean added = false;

    for (Map.Entry<Integer, Integer> entry : line.entrySet()) {
      count += entry.getValue();
	
      if (count == 1) {
        ans.add(List.of(entry.getKey(), -1)); // -1 used as a placeholder or to indicate an unknown value (e.g., 							end time not yet determined).
        added = true;
      }
      if (count == 0 && added) {
        ans.get(ans.size() - 1).set(1, entry.getKey()); // Update the end of the last interval
        added = false;
      }
    }

    return ans;
  }
}



