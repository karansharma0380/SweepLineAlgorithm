Leetcode 729
Ques: You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.


Soln: 

Very easy Implementation of Sweep Line.
Basically no 2 boking should come at the same time.

class MyCalendar {
    TreeMap<Integer, Integer> treeMap;  //Ordered HashMap
    
    public MyCalendar() {
        treeMap = new TreeMap<>();
    }
    
    public boolean book(int start, int end) {
        treeMap.put(start,treeMap.getOrDefault(start,0)+1); // map[start]++
        treeMap.put(end,treeMap.getOrDefault(end,0)-1); // map[end]--
        
        int sum=0;
        
        for(int key: treeMap.keySet()){ //By this loop we are not letting the sum of any time go above 1. 
            sum+=treeMap.get(key);
            
            if(sum>1){
                treeMap.put(start,treeMap.get(start)-1); // returning to the previous stage of our map.
                treeMap.put(end,treeMap.get(end)+1); // returning to the previous stage of our map.
                
                return false;
            }
        }
        
        return true;
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(start,end);
 */



