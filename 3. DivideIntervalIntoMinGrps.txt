Leetcode 2406
Ques: You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].

You have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.

Return the minimum number of groups you need to make.

Two intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.

 
Example 1:

Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]
Output: 3
Explanation: We can divide the intervals into the following groups:
- Group 1: [1, 5], [6, 8].
- Group 2: [2, 3], [5, 10].
- Group 3: [1, 10].
It can be proven that it is not possible to divide the intervals into fewer than 3 groups.
Example 2:

Input: intervals = [[1,3],[5,6],[8,10],[11,13]]
Output: 1
Explanation: None of the intervals overlap, so we can put all of them in one group.

Soln: 

The minimum number of groups we need is equivalent to the maximum number of intervals that overlap at some point.
That is find the overlapping/intersecting point/critical points.

Consider this intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]

Our Map	===========Sum        
Map[1]=1-> 2        2
Map[2]=1            3
Map[4]= -1          2
Map[5]=1            3			Max from this sum layer = 3
Map[6]=1-> 0        3
Map[9]= -1          2
Map[11]= -2         0

We Chose TreeMap[ordered map] coz we only need the critical/overlapping points only. 

Now suppose you want to find critical point at point 7[not present as a key]. Then we will apply binary search on the key value.
Our BS will return the just smaller element present in the treemap as a key. 
which is 6 so we will find the sum till 6 and we will get the ans as 3. [you can this by drawing vertical line
on the 7 point and there is intersection of 3 horizontal line on that vertical line.]

class Solution {
    
    TreeMap<Integer, Integer> map = new TreeMap<>();
    public int minGroups(int[][] intervals) {
        int sum=0;
        int max = 0; // To store max critical point/intersecting point/ overlapping point

        for(int i=0;i<intervals.length;i++){
            int start = intervals[i][0];
            int end = intervals[i][1];
            
            map.put(start,map.getOrDefault(start,0)+1); // map[start]++
            map.put(end+1,map.getOrDefault(end+1,0)-1); // map[end+1]--
        }
        
        for(int key:map.keySet()){ // to calculate the sum and getting the max value. 
            sum+=map.get(key);
            max= Math.max(max,sum);
        }
        
        return max;
    }
}