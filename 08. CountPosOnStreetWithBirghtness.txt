Leetcode 2237 Count Positions on Street With Required Brightness

Ques: You are given an integer n. A perfectly straight street is represented by a number line ranging from 
0 to n - 1. You are given a 2D integer array lights representing the street lamp(s) on the street. Each lights[i] = [positioni, rangei] indicates that there is a street lamp at position positioni that lights up the area from
 [max(0, positioni - rangei), min(n - 1, positioni + rangei)] (inclusive).

The brightness of a position p is defined as the number of street lamps that light up the position p. You are given a 0-indexed integer array requirement of size n where requirement[i] is the minimum brightness of the ith position on the street.

Return the number of positions i on the street between 0 and n - 1 that have a brightness of at least requirement[i].

Example 1:
Input: n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]
Output: 4
Explanation:
- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 1] (inclusive).
- The second street lamp lights up the area from [max(0, 2 - 1), min(n - 1, 2 + 1)] = [1, 3] (inclusive).
- The third street lamp lights up the area from [max(0, 3 - 2), min(n - 1, 3 + 2)] = [1, 4] (inclusive).

- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is greater than requirement[0].
- Position 1 is covered by the first, second, and third street lamps. It is covered by 3 street lamps which is greater than requirement[1].
- Position 2 is covered by the second and third street lamps. It is covered by 2 street lamps which is greater than requirement[2].
- Position 3 is covered by the second and third street lamps. It is covered by 2 street lamps which is less than requirement[3].
- Position 4 is covered by the third street lamp. It is covered by 1 street lamp which is equal to requirement[4].

Positions 0, 1, 2, and 4 meet the requirement so we return 4.

Example 2:
Input: n = 1, lights = [[0,1]], requirement = [2]
Output: 0
Explanation:
- The first street lamp lights up the area from [max(0, 0 - 1), min(n - 1, 0 + 1)] = [0, 0] (inclusive).
- Position 0 is covered by the first street lamp. It is covered by 1 street lamp which is less than requirement[0].
- We return 0 because no position meets their brightness requirement.

Soln: 

Let's take this example for understanding the question.
                   0     1     2                    0 1 2 3 4
n = 5, lights = [[0,1],[2,1],[3,2]], requirement = [0,2,1,4,1]
                pos,range

Range -> [max(0,position-range), min(n-1,position + range)]
0 -> [0,1]
1 -> [1,3]
2 -> [1,4]

Draw these ranges on a graph now. and make an array named map of size 'n+1'
and do map[start]++ and map[end+1]-- [coz end is inclusive +1 wala idx -- hoga]

               0    1      2   3   4   5        
	map = [1,1 then 2, -1, 0 , -1, -1] you will come to this conclusion. 

       0 1 2 3 4
req = [0,2,1,4,1], This means
at position 0, We need 0 lamps for brightness and 
at position 1, we need 2 lamps for brightness
at position 2, we need 1 lamp
at position 3, we need 4 lamps
at position 4, we need 1 lamp.


sum=0; // at a certain positon how many lamps are throwing light to
ans =0; 

position(idx)===map===sum===requirement===ans
 0		1      1        0 	   1	Requirement is 0 but we have light from 1 lamp so ans++	
 1		2      3	2  	  +1	Requirement is 2 but we have light from 3 lamps so ans++
 2		-1     2	1	  +1	Requirement is 1 but we have light from 2 lamps so ans++
 3		0      2	4         +0    Requirement is 4 but we have light from 2 lamps so no change
 4		-1     1	1         +1	Requirement is 1 but we have light from 1 lamp so ans++
 5		-1     0


ans=4 that is the answer.


class Solution {
    public int meetRequirement(int n, int[][] lights, int[] requirement) {
        
        int[] map = new int[n];
        
	for(int[] l :lights)
        {
            int p = l[0]; // position
            int r = l[1]; // range
            int start = Math.max(0,p-r); // According to formula
            int end = Math.min(n-1,p+r); // According to formula
            map[start]++;
            if(end<n-1)
                map[end+1]--;
        }

        int sum=0;
        int ans=0;

        for(int i =0;i<n;i++)
        {
            sum = sum + map[i];
            if(sum >=requirement[i])
                ans++;
        }

        return ans;
    }
}

TC; 0(n)
SC: O(n)

