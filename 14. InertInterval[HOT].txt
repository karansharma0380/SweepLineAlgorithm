LeetCode 57
Ques: You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Note that you don't need to modify intervals in-place. You can make a new array and return it.

Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

Soln: 

For each start we do +1 and for end we do -1 on the number line (map).
Next scan the line, if the count is 0, that mean a new line is going to start, so mark it as start
And then accumulate the count, now if count is 0, that mean the interval has ended so insert this interval.

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        TreeMap<Integer, Integer> map = new TreeMap<>(); 

        for (int[] interval : intervals) {
            map.put(interval[0], map.getOrDefault(interval[0], 0) + 1); // map[start]++
            map.put(interval[1], map.getOrDefault(interval[1], 0) - 1); // map[end]-- coz we need track of the end 									// of interval. 
        }

        map.put(newInterval[0], map.getOrDefault(newInterval[0], 0) + 1);
        map.put(newInterval[1], map.getOrDefault(newInterval[1], 0) - 1);

        int count = 0;
        List<int[]> mergedIntervals = new ArrayList<>();
        int start = 0;

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (count == 0) { // count =0 means it is start if the interval
                start = entry.getKey(); // assign the key to the start. 
            }
            count += entry.getValue(); //update count's value with key's value

            if (count == 0) { // After updating the count's value if it is 0 means here our interval is ending
                mergedIntervals.add(new int[]{start, entry.getKey()});
            }
        }

        int[][] result = new int[mergedIntervals.size()][2];
        for (int i = 0; i < mergedIntervals.size(); i++) {
            result[i] = mergedIntervals.get(i);
        }
        return result;
    }
}

